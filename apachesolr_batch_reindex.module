<?php
// $Id$

/**
 * @file
 * Enables a batch reindexing function for apachesolr using the Batch API.
 *
 * This module will be deprecated at some point soon. Code that calls the 
 * batch API for apachesolr has been added to 6.x-2.x-dev as of 11/2009, and
 * a backported patch exists. It's possible that this patch will be committed
 * before apachesolr 6.x-1.0 is released.
 *
 * Code is based on sample code on drupal.org (see 3rd see reference)
 *
 * @see http://drupal.org/node/456420
 * @see http://api.drupal.org/api/group/batch
 * @see http://drupal.org/node/180528
 */

/**
 * Implementation of hook_menu().
 *
 * @see hook_menu()
 */
function apachesolr_batch_reindex_menu() {
  $items['admin/settings/apachesolr/reindex'] = array(
    'title'            => 'Batch Reindex',
    'page callback'    => 'apachesolr_batch_reindex_settings_page',
    'access arguments' => array('administer site configuration'),
    'weight'           => 1,
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'apachesolr_batch_reindex.admin.inc',
  );
  return $items;
}


/**
* Wrapper function for the Batch API.
*/
function batch_apachesolr_reindex() {
  $batch = array(
    'operations' => array(
      array('batch_apachesolr_reindex_process', array()),
      ),
    'finished' => 'batch_apachesolr_reindex_finished',
    'title' => t('Reindexing nodes'),
    'init_message' => t('Batch reindexing is starting.'),
    //'progress_message' => t('Reindexed @current out of @total.'),
    'error_message' => t('Batch reindexing has encountered an error.'),
  );
  batch_set($batch);

  // If this function was called from a form submit handler, stop here,
  // FAPI will handle calling batch_process().

  // If not called from a submit handler, add the following,
  // noting the url the user should be sent to once the batch
  // is finished.
  batch_process('admin/settings/apachesolr/index');
}

/**
* Batch Operation Callback to process reindexing tasks.
*
* Steps involved:
* - Checks to see if solr instance is available.
* - Delete apachesolr_index_last variable from the Drupal database
* - Delete contents of apachesolr_search_node table
* - Repopulate apachesolr_search_node (cf apachesolr_rebuild_index_table())
* - Iterate through the following:
*   - Grab a batch of either apache_cron_limit or 50 nodes
*   - Do some mathematics do determine progress.
*   - Index those nodes.
*
* @param &$context
*   Batch API context object.
*
* @see apachesolr_rebuild_index_table()
*/
function batch_apachesolr_reindex_process(&$context) {
  if (empty($context['sandbox'])) {
    try {
      // Get the $solr object
      $solr = apachesolr_get_solr();
      // If there is no server available, don't continue.
      if (!$solr->ping()) {
        throw new Exception(t('No Solr instance available during indexing.'));
      }
    }
    catch (Exception $e) {
      watchdog('Apache Solr', $e->getMessage(), NULL, WATCHDOG_ERROR);
      return FALSE;
    }
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    variable_del('apachesolr_index_last');
    db_query("DELETE FROM {apachesolr_search_node}");
    // Populate table
    db_query("INSERT INTO {apachesolr_search_node} (nid, status, changed)
              SELECT n.nid, n.status, GREATEST(n.created, n.changed, c.last_comment_timestamp) AS changed
              FROM {node} n LEFT JOIN {apachesolr_search_node} asn ON n.nid = asn.nid
              LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid
              WHERE asn.changed IS NULL");
     // Make sure no nodes end up with a timestamp that's in the future.
     $time = time();
     db_query("UPDATE {apachesolr_search_node} SET changed = %d WHERE changed > %d", $time, $time);
  }
  // For this example, we decide that we can safely process
  // max set in settings for cron limit or 50 nodes at a time without a timeout.
  $limit = variable_get('apachesolr_cron_limit', 50);

  // Pull the total and remaining variables using apachesolr_search status function.
  // This is used to push the progress bar for each group of nodes being indexed.
  // Must set progress before calling the apachesolr_index_nodes() function to properly increment
  // the progress else progress and total will never equal.
  $status = module_invoke('apachesolr_search', 'search', 'status');
  $remaining = $status['remaining'];
  $total = $status['total'];
  $nodes_indexed = db_result(db_query('SELECT COUNT(nid) FROM {apachesolr_search_node}'));
  $context['sandbox']['progress'] += min($limit, $remaining);
  $number_indexed = min($limit, $remaining);
  $context['message'] = t('Reindexing @current of @total.', array('@current' => $context['sandbox']['progress'], '@total' => $total));
  $context['sandbox']['max'] = $total;

  // With each pass through the callback, retrieve the next group of nids.
  $result = apachesolr_get_nodes_to_index('apachesolr_search', $limit);
  apachesolr_index_nodes($result, 'apachesolr_search');

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
* Batch 'finished' callback
*/
function batch_apachesolr_reindex_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
    $message .= theme('item_list', $results);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing '. $error_operation[0] .' with arguments :'. print_r($error_operation[0], TRUE);
  }
  drupal_set_message($message);
}